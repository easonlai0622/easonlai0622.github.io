<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Kubernetes 介紹與使用KIND簡單建置Cluster/Local Registry</title>
    <url>/2023/11/24/k8s-introduce-1/</url>
    <content><![CDATA[<h1 id="Kubernetes-K8S"><a href="#Kubernetes-K8S" class="headerlink" title="Kubernetes(K8S)"></a>Kubernetes(K8S)</h1><p>Kubernetes 是一個協助我們自動化部署、擴張以及管理容器應用程式(containerized applications)的系統。相較於需要手動部署每個容器化應用程式(containers)到每台機器上，</p>
<ul>
<li><a href="#kubernetesk8s">Kubernetes(K8S)</a><ul>
<li><a href="#k8s-%E6%9E%B6%E6%A7%8B">K8S 架構</a></li>
<li><a href="#%E4%BB%80%E9%BA%BC%E6%98%AF-k8s">什麼是 K8S</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-kind-%E6%9E%B6%E8%A8%AD-k8s-cluster">使用 KinD 架設 K8S Cluster</a></li>
<li><a href="#k8s-dashboard">K8S Dashboard</a></li>
<li><a href="#kind-local-registry">KinD Local Registry</a><ul>
<li><a href="#%E5%BB%BA%E7%AB%8B%E5%A5%BD-local-registry-%E7%84%B6%E5%BE%8C%E5%91%A2">建立好 Local Registry 然後呢?</a></li>
</ul>
</li>
<li><a href="#%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4">常用指令</a></li>
</ul>
</li>
</ul>
<h2 id="K8S-架構"><a href="#K8S-架構" class="headerlink" title="K8S 架構"></a>K8S 架構</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Images-Posts/2_k8s-pods.png"
                      alt="k8sPod"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Images-Posts/2_components-of-kubernetes.svg"
                      alt="k8sPod2"
                ></p>
<h2 id="什麼是-K8S"><a href="#什麼是-K8S" class="headerlink" title="什麼是 K8S"></a>什麼是 K8S</h2><p>Kubernetes 可以幫我們做到以下幾件事情：</p>
<ol>
<li>同時部署多個 containers 到一台機器上，甚至多台機器。</li>
<li>管理各個 container 的狀態。如果提供某個服務的 container 不小心 crash 了，Kubernetes 會偵測到並重啟這個 container，確保持續提供服務</li>
<li>將一台機器上所有的 containers 轉移到另外一台機器上。</li>
<li>提供機器高度擴張性。Kubernetes cluster 可以從一台機器，延展到多台機器共同運行。</li>
</ol>
<ul>
<li><p>K8S 架構圖<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Images-Posts/2_k8s-arch-all.png"
                      alt="KinD_Arch"
                ></p>
</li>
<li><p><strong>Master Node</strong></p>
<blockquote>
<p>在 k8s 中，Master 扮演著管理叢集的角色，管理者可以透過 CLI (Command Line Interface) 或 APIs (Application Programming Interface) 或控制介面 (Dashboard) 等等不同方式與 Master 溝通進而存取、控制或修改叢集狀態例如配置資源、擴充 Pod 數量等等。</p>
</blockquote>
<ul>
<li>Scheduler<ul>
<li>Scheduler 會知道目前 Worker Node 的狀況，當需要配置 Pod 時，Scheduler 會找出最合適的 Node 並配置 Pod。</li>
</ul>
</li>
<li>API Server<ul>
<li>管理者會透過 REST command 把需要做的工作 (例如，新增或刪除物件) 傳送到 api-server ， api-server 會驗證並處理管理者要求執行的工作，當工作執行完畢後，叢集的最新狀態便會儲存到 etcd 中。</li>
</ul>
</li>
<li>Controller<ul>
<li>Controller 會透過 api-server 了解目前叢集的狀態，並嘗試把目前狀態調整為管理者想要的狀態。</li>
<li>管理者想要的狀態可能會因為種種原因無法達成，例如資源不夠 (cpu, memory) 等等。而 Controller 會持續嘗試著把叢集調整成管理者想要的狀態。</li>
</ul>
</li>
<li>etcd<ul>
<li>etcd 為鍵值儲存區 (key-value storage)，在 k8s 中被用來儲存叢集的狀態。</li>
<li>etcd 可以是 Master 的一部分或者獨立被設置在外部。同樣的，當 etcd 被設置在外部時，Master 會連到 etcd 取得或更新叢集狀態。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Worker Node</strong></p>
<blockquote>
<p>Worker Node 簡單來說就是一台機器，它可以是一台實體機器或虛擬機 (VMs)。而多個運行單位 Pod 會被配置到 Worker Node 中運行，而每個 Pod 中含有一到多個容器。</p>
</blockquote>
<ul>
<li>kubelet<ul>
<li>kubelet 運行在 Worker Node，負責建立 Pod 中的容器。當 kubelet 收到來自 Master Node 送來 Pod 定義內容時，kubelet 會透過 container runtime 建立 Pod 需要的容器並確保容器狀態是可運行的。</li>
</ul>
</li>
<li>kube-proxy<ul>
<li>當 Pod 運行在 Worker Node 之後，外部需要透過 Service 這個 k8s 物件來與 Pod 連線而非直接存取 Pod。<br>kube-proxy 運行在 Worker Node 且持續監聽 api-server，並知道 Service 被建立或刪除。當 Service 被建立後，kube-proxy 會負責將 Request 導到對應的 Pod。</li>
</ul>
</li>
<li>pod<ul>
<li>k8s 基本運行單位。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="使用-KinD-架設-K8S-Cluster"><a href="#使用-KinD-架設-K8S-Cluster" class="headerlink" title="使用 KinD 架設 K8S Cluster"></a>使用 KinD 架設 K8S Cluster</h2><blockquote>
<p>kind is a tool for running local Kubernetes clusters using Docker container “nodes”.kind was primarily designed for testing Kubernetes itself, but may be used for local development or CI.</p>
</blockquote>
<ul>
<li>Kind 架構圖<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Images-Posts/2-Kind-Arch.png"
                      alt="KinD_Arch"
                ></li>
</ul>
<ol>
<li><p>安裝 KinD</p>
<ol>
<li>wsl -l -v</li>
<li>wsl –set-version Ubuntu-22.04 2</li>
<li>docker 設定中調整 intergration 與 Ubuntu 整合 WSL2 的環境，讓 Ubuntu 可以直接調用 docker cli</li>
<li>下載 KinD 並安裝於 Ubuntu<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64</span><br><span class="line">chmod +x ./kind</span><br><span class="line">sudo mv ./kind /usr/local/bin/kind</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
<li><p>建立 K8S Cluster (要先開 Docker Engine Desktop)</p>
<ol>
<li>先建立 kind.yaml 檔<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Cluster</span></span><br><span class="line">  <span class="attr">apiVersion:</span> <span class="string">kind.x-k8s.io/v1alpha4</span></span><br><span class="line">  <span class="attr">nodes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">control-plane</span></span><br><span class="line">    <span class="attr">extraPortMappings:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">30000</span> <span class="comment">#容器的port</span></span><br><span class="line">      <span class="attr">hostPort:</span> <span class="number">5432</span> <span class="comment">#對外開啟的port</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">worker</span></span><br></pre></td></tr></table></figure></div></li>
<li>使用 yaml 檔建立叢集 <code>kind create cluster --config kind.yaml -n kind</code></li>
</ol>
</li>
<li><p>將做好的 image 複製進去 kind 所建立的 cluster</p>
<ol>
<li><p>進入路徑 <strong>..&#x2F;src&#x2F;dockerDemo</strong>，執行<code>docker build -t dockerDemo:latest .</code></p>
<p>執行好後可以先試試看 <code>docker run -it dockerDemo -p 3000:3000</code>，然後開啟瀏覽器進入 <strong>localhost:3000</strong> 看是否有看見 <strong>Hello World!</strong> 的訊息。</p>
</li>
<li><p>在 <strong>Ubuntu</strong> 執行 <code>kind load docker-image -n dockerDemo:latest</code></p>
</li>
<li><p>執行 <code>docker exec -it kind-worker crictl image</code> 查看是否有正確讀入 image。</p>
</li>
</ol>
</li>
<li><p>建立一個 pod，這個 pod 將會直接在 worker 裡面做為一個單位運行，裡面則會包含使用方才的 image 所起的 Container。而建立好該 Pod 之後則需要建立 Service 來貫通整條路。</p>
<ol>
<li>建立 <code>00-pods-dockerdemo.yaml</code><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> <span class="comment">#Pod 使用的 Kubernetes API 是 v1 版本號</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span> <span class="comment">#建立類型</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pod</span> <span class="comment">#該 Pod 的名稱</span></span><br><span class="line">  <span class="attr">labels:</span> <span class="comment">#標籤, 後續建立 Service 會使用, 所以要記得</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">webserver</span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment">#該 Pod 的描述</span></span><br><span class="line">  <span class="attr">containers:</span> <span class="comment">#所包含的容器</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod-demo</span> <span class="comment">#容器名稱</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">dockerdemo:latest</span> <span class="comment">#容器映像檔</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">Never</span> <span class="comment">#因為KinD本身已有複製本地的image，所以要設這個。</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3000</span> <span class="comment">#該容器對外開放的 Port</span></span><br></pre></td></tr></table></figure></div></li>
<li>建立 <code>00-svc-dockerdemo.yaml</code><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dockerdemo-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3000</span> <span class="comment">#指定建立此Service的Cluster IP中是哪個port number要對應到targetPort</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30000</span> <span class="comment">#指定這個node透過哪個port連接targetPort</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">3000</span> <span class="comment">#指定的Pod的Port號, 也就是外部會透過port 30000對應到此pod的port 3000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">webserver</span> <span class="comment">#將特定的port號收到的請求導向app:webserver標籤的pods</span></span><br></pre></td></tr></table></figure></div></li>
<li>建立 Pods，執行 <code>kubectl apply -f 00-pods-dockerdemo.yaml</code></li>
<li>有了 Pod 之後，需打通其橋梁，因此建立 Service。 執行 <code>kubectl apply -f 00-svc-dockerdemo.yaml</code></li>
<li>可確認其有無完整建立，執行 <code>kubectl get [Resource]</code> 來查看。Resource 可改為 svc 或 pods</li>
</ol>
</li>
<li><p>在 Host 主機打開瀏覽器，進入 <code>127.0.0.1:5432</code> 就可以看到 <strong>Hello World!</strong> 字樣。而這個 5432 Port 則是 Host 透過該 Port 進入到 Cluster，並由 Cluster 設定的 5432 進入到 30000，然後觸及到 service 的 3000 去對應到 Pod 的 3000。</p>
</li>
</ol>
<blockquote>
<p>其實在 Pod 建立好之後，就可以直接透過 Port Foward 的方式來將 Pod 整個暴露給外網的 Port。Port Forward 可以透過 Kubectl 建立起 Proxy 來將外部的流量導入你想進入的 Pod 的 Port。因為要建立起整個 Port 串通是一件不太方便的事情，除此之外在某些狀況也可能暴露整個服務。因此透過這樣的方式能夠更簡便的去除錯。只需要輸入：<code>kubectl port-forward my-pod 8000:3000</code> 。就能透過 Host 的瀏覽器進入 <code>127.0.0.1:8000</code> 就可以看到 **Hello World!**！</p>
</blockquote>
<h2 id="K8S-Dashboard"><a href="#K8S-Dashboard" class="headerlink" title="K8S Dashboard"></a>K8S Dashboard</h2><p>因為 KinD 並沒有直接內建儀表板，所以我們得自己安裝回來。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 確認是否有Pod被建立</span></span><br><span class="line">kubectl get pod -n kubernetes-dashboard -A -w</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>安裝好後需建立使用者來取得權限和建立 Token</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding default-admin --clusterrole cluster-admin --serviceaccount=default:default</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get Token</span></span><br><span class="line">kubectl create token default</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run Dashboard</span></span><br><span class="line">kubectl proxy</span><br></pre></td></tr></table></figure></div>

<p>網址列輸入 <code>http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login</code> 進入 dashboard，貼入方才的 Token 就可以登入。</p>
<h2 id="KinD-Local-Registry"><a href="#KinD-Local-Registry" class="headerlink" title="KinD Local Registry"></a>KinD Local Registry</h2><p><strong>如果已實作一個 Cluster 的話，那麼要使用 Local Registry 需要重建一個新的 Cluster。因為 KinD 沒辦法針對叢集的設定去做調整，因此在建立時就必須決定好。</strong></p>
<blockquote>
<p>通常在 CI&#x2F;CD 架構中會有個地方存放產出物(Artifact)，無論是 Nuget、Npm 或是 Image，因此我們想透過 KinD 去模擬未來的 CI&#x2F;CD 架構的話，就必須建立一個可以存放產出物的地方。但在初次練習沒有那麼多經驗可能會苦惱究竟要選擇什麼樣的工具或怎麼架。</p>
</blockquote>
<p>Nexus Oss Registry、Proget 等等的都可以是未來的解決方案，或者是單純要架設私有的 Image Registry 也可以選擇 Habor。但在這裡我們會選擇最容易架設的 KinD Local Registry。</p>
<p>KinD Local Registry 架設方式只有兩步，到<a class="link"   href="https://kind.sigs.k8s.io/docs/user/local-registry/" >官網 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>複製執行語法，修改成自己要的。然後在 WSL2 裡面執行就能完成。</p>
<p>以下是我建立時所使用的執行語法。</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"></span><br><span class="line"><span class="comment"># create registry container unless it already exists</span></span><br><span class="line">reg_name=<span class="string">&#x27;kind-registry&#x27;</span></span><br><span class="line">reg_port=<span class="string">&#x27;5001&#x27;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(docker inspect -f &#x27;&#123;&#123;.State.Running&#125;&#125;&#x27; <span class="string">&quot;<span class="variable">$&#123;reg_name&#125;</span>&quot;</span> 2&gt;/dev/null || true)</span>&quot;</span> != <span class="string">&#x27;true&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line">  docker run \</span><br><span class="line">    -d --restart=always -p <span class="string">&quot;127.0.0.1:<span class="variable">$&#123;reg_port&#125;</span>:5000&quot;</span> --name <span class="string">&quot;<span class="variable">$&#123;reg_name&#125;</span>&quot;</span> \</span><br><span class="line">    registry:2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create a cluster with the local registry enabled in containerd</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | kind create cluster --config=-</span></span><br><span class="line"><span class="string">kind: Cluster</span></span><br><span class="line"><span class="string">apiVersion: kind.x-k8s.io/v1alpha4</span></span><br><span class="line"><span class="string">nodes:</span></span><br><span class="line"><span class="string">- role: control-plane</span></span><br><span class="line"><span class="string">  extraPortMappings:</span></span><br><span class="line"><span class="string">    - containerPort: 30000</span></span><br><span class="line"><span class="string">- role: worker</span></span><br><span class="line"><span class="string">containerdConfigPatches:</span></span><br><span class="line"><span class="string">- |-</span></span><br><span class="line"><span class="string">  [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;localhost:$&#123;reg_port&#125;&quot;]</span></span><br><span class="line"><span class="string">    endpoint = [&quot;http://$&#123;reg_name&#125;:5000&quot;]</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># connect the registry to the cluster network if not already connected</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(docker inspect -f=&#x27;&#123;&#123;json .NetworkSettings.Networks.kind&#125;&#125;&#x27; <span class="string">&quot;<span class="variable">$&#123;reg_name&#125;</span>&quot;</span>)</span>&quot;</span> = <span class="string">&#x27;null&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line">  docker network connect <span class="string">&quot;kind&quot;</span> <span class="string">&quot;<span class="variable">$&#123;reg_name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Document the local registry</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/enhancements/tree/master/keps/sig-cluster-lifecycle/generic/1755-communicating-a-local-registry</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | kubectl apply -f -</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: ConfigMap</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: local-registry-hosting</span></span><br><span class="line"><span class="string">  namespace: kube-public</span></span><br><span class="line"><span class="string">data:</span></span><br><span class="line"><span class="string">  localRegistryHosting.v1: |</span></span><br><span class="line"><span class="string">    host: &quot;localhost:$&#123;reg_port&#125;&quot;</span></span><br><span class="line"><span class="string">    help: &quot;https://kind.sigs.k8s.io/docs/user/local-registry/&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="建立好-Local-Registry-然後呢"><a href="#建立好-Local-Registry-然後呢" class="headerlink" title="建立好 Local Registry 然後呢?"></a>建立好 Local Registry 然後呢?</h3><ol>
<li>建立 Docker Image</li>
<li>將 Image Push 上去 Registry</li>
<li>透過建立 Deployment 來部署</li>
<li>透過建立 Service 讓主機能通到 Node 裡 Pod 的 Container</li>
</ol>
<p><strong>建立 Docker Image</strong></p>
<pre><code>進入路徑 ../src/dockerDemo，執行`docker build -t dockerDemo:latest .`
</code></pre>
<p><strong>Tag Image Local Registry</strong></p>
<pre><code>docker tag dockerDemo localhost:5001/dockerDemo:latest
</code></pre>
<p><strong>Push Image To Local Registry</strong></p>
<pre><code>docker push localhost:5001/dockerDemo
</code></pre>
<p>執行後可以看見像這樣的訊息：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Using default tag: latest</span><br><span class="line">The push refers to repository [localhost:5001/dockerDemo]</span><br><span class="line">9992941a9f7b: Pushed</span><br><span class="line">e9f76b9eead8: Pushed</span><br><span class="line">e40a27ff8335: Pushed</span><br><span class="line">ea0f922ba68b: Pushed</span><br><span class="line">1f6b17cd478d: Pushed</span><br><span class="line">17bec77d7fdc: Pushed</span><br><span class="line">latest: digest: sha256:05e38376828b2d2279517c04e93c2a0b072abbaf0fcbc8e32422c047e9a2c03d size: 1578</span><br></pre></td></tr></table></figure></div>

<p><strong>建立 Deployment 部署，在這裡會向 Local Registry Pull Image</strong></p>
<pre><code>kubectl create deployment test-dockerDemo --image=localhost:5001/dockerDemo
</code></pre>
<p><strong>可以檢查 Pod 是否正常運作中</strong></p>
<pre><code>kubectl get pods -o wide
</code></pre>
<p><strong>建立 Service 打通 Host 和 Node</strong></p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dockerdemo-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30000</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test-dockerdemo</span></span><br></pre></td></tr></table></figure></div>

<p>透過 <code>docker ps</code> 可以看見 K8S 的 Container 的 30000 port 是對應到 Host 的哪個 Port 對外開放。得知之後只要在 Host 的 Browser 進入 127.0.0.1:[<strong>Port</strong>] 就能看見 Hello World!。</p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get image list in kind (cluster1 叢集名稱)</span></span><br><span class="line">docker <span class="built_in">exec</span> -it cluster1-worker crictl image</span><br><span class="line"></span><br><span class="line"><span class="comment"># load image to k8s cluster</span></span><br><span class="line">kind load docker-image redis:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># get login token</span></span><br><span class="line">kubectl create token default</span><br><span class="line"></span><br><span class="line"><span class="comment"># get cluster info</span></span><br><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment"># get cluster config</span></span><br><span class="line">kubectl config view</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Message Queue 簡單介紹與比較</title>
    <url>/2023/11/25/message-queue-introduce/</url>
    <content><![CDATA[<h1 id="Message-Queue"><a href="#Message-Queue" class="headerlink" title="Message Queue"></a>Message Queue</h1><blockquote>
<p>Message Queue 訊息佇列，既然資料結構如其名是 Queue，那麼 FIFO 先進先出的概念就得先了解。存放於 Queue 中的即是 Message。</p>
</blockquote>
<p>主要用途在於提供 <code>不同Process</code> 、 <code>不同Thread</code> 或是在微服務中各個 Service 之間的<strong>訊息溝通</strong>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../Images-Posts/2_MQ_Process.png"
                      alt="MQ_Process"
                ></p>
<h2 id="Application-Intergration"><a href="#Application-Intergration" class="headerlink" title="Application Intergration"></a>Application Intergration</h2><blockquote>
<p>在一個系統中，一般不會只有一隻程式在運作，而是會有多隻程式同時負責各種不同的任務，而程式之間難免會有互相傳遞資料進行處理的需求，而這類的需求，以下都統稱為 applcation 的整合。</p>
</blockquote>
<ul>
<li><p>File Based Intergration</p>
<p>Application 根據要處理的任務，產生檔案到特定的路徑。其中任務成功或失敗可以存放到不同 folder 中。而其他接收訊息的 application(或稱 process application) 則是不停監控該路徑有沒有新檔案產生，有則取出檔案進行處理。</p>
</li>
<li><p>Shared Database Intergration</p>
<ol>
<li>source application 收到新任務時，將資料寫入 db 中</li>
<li>process application 監聽的對象從路徑中的檔案換成 database，若有新資料則進行處理</li>
<li>process application 處理後將狀態寫回 db 中</li>
</ol>
</li>
<li><p>Direct Connection Intergration</p>
<ol>
<li>source application 直接傳訊息給 process application</li>
<li>可能透過 TCP&#x2F;IP 或是 named pipe connection 的方式傳遞資料</li>
<li>傳遞資訊的資料格式並沒有限制，由連線兩端的 application 自訂，可以是純文字、XML 或 JSON。</li>
</ol>
</li>
<li><p><strong>Asynchronous Message Broker (Message Queue)</strong></p>
<ol>
<li>不限傳遞資料格式</li>
<li>需要額外 message queue middleware 協助，也會被稱作 message broker 或 message bus</li>
<li>message broker 收到來自 source application 的訊息後，會轉發給 process application，而在這方式中，source application 與 process application 通常又各自被稱為 producer 與 consumer。</li>
</ol>
</li>
</ul>
<h2 id="特性-優勢"><a href="#特性-優勢" class="headerlink" title="特性 &amp; 優勢"></a>特性 &amp; 優勢</h2><p>Message Queue 最重要的能力在於<strong>非同步</strong>的特性，因為 Producers 發送訊息時不需即刻得到 Response 便可繼續執行其他事情。</p>
<p>之於非同步的特性伴隨著的優勢便是解耦(Decouple)，開發人員就可以專心負責在屬於自己的區塊進行工作。除此之外 Producer 無需清楚 Consumer 的實際位置(IP Address 等等)，只需要將資料送往 Message Queue 就好，剩下的事情 Message Broker 會根據設定自行處理掉。</p>
<p>再來高可用性，例如<strong>叢集的高可用性</strong>，當 Master 處於異常狀態時，會轉由 Slave 進行代理繼續提供服務。以確保服務的運行來提供叢集的高可用性。另外則是<strong>資料的高可用性</strong>，當 Message 送至 Queue 但服務發生異常(如 Consumer 消失時)，資料仍然可等到 Consumer 重新上線時再進行推送(Push)或是被拉取(Pull)，直到 Message 被正確消耗後會發出 Ack (Acknowledgement) 確認通知之後 Message 則會消失。</p>
<p>最後則是 Scaling 擴展，如果突然遭遇大的流量，此時 queue 就提供了一個 buffer 的功能，能夠緩衝尖峰流量，在資源固定的情況下，能夠處理更多的任務，以時間換取資源！ 但有時訊息可能真的太多，產生的速度快於消耗的速度，或是你無法接受太長的 latency，此時 consumer process 就可以隨時增加多個，不會有衝突的風險</p>
<p>另外，先進先出的佇列資料結構也直接確保了資料的有序性。</p>
<h2 id="Use-Case"><a href="#Use-Case" class="headerlink" title="Use Case"></a>Use Case</h2><ul>
<li><p><strong>延遲問題不重要的工作</strong></p>
<p>寄送郵件這類工作，使用者可以接受信晚個幾秒，幾十秒甚至幾分鐘到時。意即資料不是由使用者寫入，使用者也不曉得資料何時應該要出現，延遲問題就不是那麼重要。</p>
</li>
<li><p><strong>大量運算的工作</strong></p>
<p>比如說 image resizing 或是 video encoding 這類 CPU intensive 的工作，一來是使用者上傳完圖片影片，可能不需要等到這類都做完了你才跟他說 ok，二來是你也不會想讓這類工作 block 住或拖垮你的 web server 的效能．</p>
</li>
<li><p><strong>無法控制的工作</strong></p>
<p>當你的工作需要協調許多資源才能完成時，有機會因為其中一個資源負載過重因而造成整個工作變得極度緩慢，尤其資源是外部的，所以你無法控制的時候。</p>
</li>
</ul>
<h2 id="Kafka-與-RabbitMQ-的抉擇"><a href="#Kafka-與-RabbitMQ-的抉擇" class="headerlink" title="Kafka 與 RabbitMQ 的抉擇"></a>Kafka 與 RabbitMQ 的抉擇</h2><p>比較兩者之前應該先了解 Message Queue 分成兩種：</p>
<ol>
<li>Memory Based</li>
<li>Log Based</li>
</ol>
<ul>
<li><p><strong>Memory Based (RabbitMQ)</strong></p>
<ul>
<li>Message 是<strong>存放於 Memory</strong></li>
<li>Consumer 發出 Ack(Acknowledgement) 確認 Message 取得後 Broker 則會直接刪除 Message</li>
<li>Message 傳送方式是<code>推送(Push)</code></li>
</ul>
</li>
<li><p><strong>Log Based (Kafka)</strong></p>
<ul>
<li>Message 進入後會直接<strong>寫到硬碟</strong>上，Consumer 消耗訊息時則是讀取檔案，直到讀到檔案資料的盡頭，接著繼續等候下一次通知。</li>
<li>Message 傳送方式為<code>拉取(Pull)</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>Log Based 的讀寫速度限制則可透過將 topic 的 log 進行分區來進行改善，每個分區(Partition)由一台機器負責，並可獨立讀寫。</p>
</blockquote>
<p>了解了兩種基底的 MQ 差異後，接著了解他們兩者特性上的差異。</p>
<p>先以簡易的比較表概括：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>RabbitMQ</th>
<th>Kafka</th>
</tr>
</thead>
<tbody><tr>
<td>Load Balancing</td>
<td>Yes</td>
<td>Yes, but limited</td>
</tr>
<tr>
<td>Fan-out</td>
<td>Yes, through exchange binding</td>
<td>Yes</td>
</tr>
<tr>
<td>Persistence</td>
<td>Yes, through configuration</td>
<td>Yes</td>
</tr>
<tr>
<td>Inorder delivery</td>
<td>Yes, conditionally</td>
<td>yes, per partition</td>
</tr>
</tbody></table>
<ul>
<li><p><code>Load Balancing(負載平衡)</code></p>
<ul>
<li><p><strong>Memory based</strong></p>
<p>自然地 support 了 load balancing，當有 message 時， broker 輪流地向跟他有建立連結的 consumer 推送信息，就達成了 load balancing 的效果， 越多 consumer，就可以平行處理越多的工作。</p>
</li>
<li><p><strong>Log based</strong></p>
<p>需透過方才提到的 Partition 方法來達成 load balancing。<br>例如一個 topic，並且將此 topic 的 partition 分成三份，此時就可以 assign 三個 consumer 給他。感覺上像是一個 topic 的 message 被提供給三個 consumer 拉取。但實際上則是每個 partition 對應到一個 consumer，便實現了平行處理，意即達到負載平衡。</p>
</li>
</ul>
</li>
<li><p><code>Fan-Out(扇形發送)</code></p>
<ul>
<li><p><strong>Memory based</strong></p>
<p>需要透過額外的設計才能達成，透過 AMQP 協議的 exchange binding 可以實現 pub-sub。</p>
</li>
<li><p><strong>Log based</strong></p>
<p>本身即為 fan-out，每個 consumer 對 log 檔案想讀哪就讀哪，想重複讀幾次就讀幾次</p>
</li>
</ul>
</li>
<li><p><code>Persistence(持續性)</code></p>
<ul>
<li><p><strong>Memory based</strong></p>
<p>可透過設置將 Message 寫入硬碟作為 Backup 時使用，但僅保存到 Consumer 成功消耗之前。</p>
</li>
<li><p><strong>Log based</strong></p>
<p>每個 message 都會寫入硬碟，除非刪掉它，否則會一直存在。</p>
</li>
</ul>
</li>
<li><p><code>Inorder delivery(有序發送)</code></p>
<ul>
<li><p><strong>Memory based</strong></p>
<p>無法保證 message 一個一個按照順序的被處理，除非每一個 topic 只有一個 consumer。</p>
</li>
<li><p><strong>Log based</strong></p>
<p>每個 partition 上的 message，一定是被 consumer 有序讀取，但不同 partition 之間就沒有順序的保證，他們理論上是各自獨立的。</p>
</li>
</ul>
</li>
</ul>
<h2 id="最終選擇誰"><a href="#最終選擇誰" class="headerlink" title="最終選擇誰"></a>最終選擇誰</h2><p>需考慮下列三點</p>
<ol>
<li><p>資料是否需要被保存?</p>
<ul>
<li>需要保存鐵定是選擇 log based 的 MQ，也就是 Kafka。</li>
</ul>
</li>
<li><p>資料有序性是否重要?</p>
<ul>
<li>針對系統開發的面向判斷是否需要維持資料的有序性，如果需要的話則需要選擇 Log Based。但這也僅限於同一個 Partition，若不同的話則無法保證順序。</li>
</ul>
</li>
<li><p>工作耗損是否昂貴?</p>
<ul>
<li>log based 受限於需要多個 partition 來實現負載平衡來提升讀寫速度，建設上較為昂貴。</li>
<li>同個 Partition 只要 Message 過多容易消耗更多時間，最後造成堵塞。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Basic</category>
      </categories>
      <tags>
        <tag>MicroService</tag>
        <tag>MessageQueue</tag>
      </tags>
  </entry>
</search>
